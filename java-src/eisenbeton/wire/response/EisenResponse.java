// automatically generated by the FlatBuffers compiler, do not modify

package eisenbeton.wire.response;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class EisenResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static EisenResponse getRootAsEisenResponse(ByteBuffer _bb) { return getRootAsEisenResponse(_bb, new EisenResponse()); }
  public static EisenResponse getRootAsEisenResponse(ByteBuffer _bb, EisenResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EisenResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int status() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public eisenbeton.wire.response.Header headers(int j) { return headers(new eisenbeton.wire.response.Header(), j); }
  public eisenbeton.wire.response.Header headers(eisenbeton.wire.response.Header obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int headersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public eisenbeton.wire.response.Header.Vector headersVector() { return headersVector(new eisenbeton.wire.response.Header.Vector()); }
  public eisenbeton.wire.response.Header.Vector headersVector(eisenbeton.wire.response.Header.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int content(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int contentLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector contentVector() { return contentVector(new ByteVector()); }
  public ByteVector contentVector(ByteVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer contentAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer contentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createEisenResponse(FlatBufferBuilder builder,
      int status,
      int headersOffset,
      int contentOffset) {
    builder.startTable(3);
    EisenResponse.addContent(builder, contentOffset);
    EisenResponse.addHeaders(builder, headersOffset);
    EisenResponse.addStatus(builder, status);
    return EisenResponse.endEisenResponse(builder);
  }

  public static void startEisenResponse(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStatus(FlatBufferBuilder builder, int status) { builder.addInt(0, status, 0); }
  public static void addHeaders(FlatBufferBuilder builder, int headersOffset) { builder.addOffset(1, headersOffset, 0); }
  public static int createHeadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addContent(FlatBufferBuilder builder, int contentOffset) { builder.addOffset(2, contentOffset, 0); }
  public static int createContentVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createContentVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startContentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endEisenResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEisenResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEisenResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EisenResponse get(int j) { return get(new EisenResponse(), j); }
    public EisenResponse get(EisenResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

